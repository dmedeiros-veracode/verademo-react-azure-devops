name:  'Promote Release Candidate Scan'

#$(TeamProject)_$(SourceBranchName)_$(Build.BuildId)_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none

parameters:
  - name: vid
    displayName: veracode-api-id
    default: ""
    type: string
  - name: vkey
    displayName: veracode-api-key
    default: ""
    type: string
  - name: appName
    default: "verademo-net-github-actions"
    type: string
  - name: sandboxName
    default: "Release Candidate"
    type: string

variables:
  - name: ApplicationId
  - name: SandboxId
  - name: AnalysisId
  - name: AnalysisName

steps:
  - script: java --version
    continueOnError: true
    displayName: Report Java Version installed

  - pwsh: |
      $versionstring = curl https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/maven-metadata.xml | Out-String -Stream | Select-String -Pattern 'latest';
      $wrapper_version = $versionstring -replace '\s','' -replace '<latest>','' -replace '</latest>','';
      echo $wrapper_version
      curl https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/$WRAPPER_VERSION/vosp-api-wrappers-java-$WRAPPER_VERSION-dist.zip -o $(Build.ArtifactStagingDirectory)/dist.zip
      7z e $(Build.ArtifactStagingDirectory)/dist.zip -o$(Build.ArtifactStagingDirectory)/extract/ -y
    displayName: Downloading the latest version of the Veracode Java API
    enabled: true
 
  - script: ls -la $(Build.ArtifactStagingDirectory)
    displayName: Show Artifact Directory Content

  - script: |
      ls -la $(Build.ArtifactStagingDirectory)/extract/
    displayName: Show Extract Directory Content
    enabled: true
    
  - script: |
      java -jar $(Build.ArtifactStagingDirectory)/extract/VeracodeJavaAPI.jar -version
    displayName: Veracode Wrapper Version
    enabled: false
      
  - pwsh: |
      java -jar $(Build.ArtifactStagingDirectory)/extract/VeracodeJavaAPI.jar -vid ${{parameters.vid}} -vkey ${{parameters.vkey}} -action getapplist | tee applicationlist.xml
      [xml]$Xml = Get-Content .\applicationlist.xml
      $SnippetNamespace = @{ns = "https://analysiscenter.veracode.com/schema/2.0/applist"}
      $appid = Select-Xml -Xml $Xml -Namespace $SnippetNamespace -XPath "//ns:app[@app_name='${{parameters.appName}}']" | ForEach-Object {$_.Node.app_id}
      echo $appid
      echo "##vso[task.setvariable variable=ApplicationId]$appid"
      echo "Application ID: $(ApplicationId)"
      #If Blanck Report back that the application name cannot be found



    displayName: Retrieving Application ID
    
  - pwsh: |
      Write-Host "Application ID: $(ApplicationId)"
      java -jar $(Build.ArtifactStagingDirectory)/extract/VeracodeJavaAPI.jar -vid ${{parameters.vid}} -vkey ${{parameters.vkey}} -action getsandboxlist -appid $(ApplicationId) | tee sandboxlist.xml

      [xml]$Xml = Get-Content .\sandboxlist.xml
      $SnippetNamespace = @{ns = "https://analysiscenter.veracode.com/schema/4.0/sandboxlist"}
      # ${{parameters.sandboxName}}
      $sandbox_id = Select-Xml -Xml $Xml -Namespace $SnippetNamespace -XPath "//ns:sandbox[@sandbox_name='${{parameters.sandboxName}}']" | ForEach-Object {$_.Node.sandbox_id}
  
      echo "##vso[task.setvariable variable=SandboxId]$sandbox_id"
      Write-Host "Sandbox ID: $(SandboxId)"
    displayName: Retrieving Sandbox ID
  
  - pwsh: |
      Write-Host "Sandbox ID: $(SandboxId)"
      java -jar $(Build.ArtifactStagingDirectory)/extract/VeracodeJavaAPI.jar -vid ${{parameters.vid}} -vkey ${{parameters.vkey}} -action GetBuildList -appid $(ApplicationId) -sandboxid $(SandboxId) | tee buildlist.xml
   
      [xml]$Xml = Get-Content .\buildlist.xml
      $SnippetNamespace = @{ns = "https://analysiscenter.veracode.com/schema/2.0/buildlist"}
      $Build = Select-Xml -Xml $Xml -Namespace $SnippetNamespace -XPath "//ns:build[last()]"
      $BuildId = $Build.Node.build_id
      $Version = $Build.Node.version
      echo "Analysis ID: $BuildId"
      echo $Version

      echo "##vso[task.setvariable variable=AnalysisName]$Version"
      echo "##vso[task.setvariable variable=AnalysisId]$BuildId"

    displayName: Retrieving Build List

  - pwsh: |
      Write-Host "Analysis ID: $(AnalysisId)"
      java -jar $(Build.ArtifactStagingDirectory)/extract/VeracodeJavaAPI.jar -vid ${{parameters.vid}} -vkey ${{parameters.vkey}} -action GetBuildInfo -appid $(ApplicationId) -sandboxid $(SandboxId) -buildid $(AnalysisId) | tee buildinfo.xml
   
      [xml]$Xml = Get-Content .\buildinfo.xml
      $SnippetNamespace = @{ns = "https://analysiscenter.veracode.com/schema/4.0/buildinfo"}
      $element = Select-Xml -Xml $Xml -Namespace $SnippetNamespace -XPath "//ns:build"
      Write-Host $element.Node.results_ready
      $results_ready = $element.Node.results_ready
      echo "Result Ready: $results_ready"
      echo "##vso[task.setvariable variable=resultsReady]$results_ready"
      
    displayName: Evaluating Scan
    enabled: true

  - pwsh: |
      Write-Host 'Hello World: $(resultsReady)'
      #java -jar $(Build.ArtifactStagingDirectory)/extract/VeracodeJavaAPI.jar -vid ${{parameters.vid}} -vkey ${{parameters.vkey}} -action PromoteSandbox -buildid $(AnalysisId)
    condition: eq(variables['resultsReady'],'true')
    displayName: Promoting Scan